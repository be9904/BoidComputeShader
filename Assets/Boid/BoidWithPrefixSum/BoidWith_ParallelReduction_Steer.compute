// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// data structure of agent
struct BoidState
{
    float3 position;
    float3 forward;
};

RWStructuredBuffer<BoidState> boidBuffer : register(u2);            // agent data
RWStructuredBuffer<BoidState> boidPrefixSumBuffer : register(u3);   // buffer for calculating agent average value

uint numBoids;          // number of agents
float deltaTime;        // elapsed time of simulation
half separationWeight;  // force that keeps agent from getting too close
half alignmentWeight;   // 整列しあう比重
half targetWeight;      // weight toward destination
half moveSpeed;         // speed of agent
float3 targetPosition;  // destination

// normalize function that avoids dividing by 0
float3 normalizeSafe(float3 v)
{
    return length(v) > 0 ? normalize(v) : 0;
}

[numthreads(32,1,1)] // threads run on 32 x 1 x 1 grid
void CSMain(uint3 id : SV_DispatchThreadID)
{
    // not available on metal
    // get total number of agents
    // uint numBoids, stribeBoids;
    // boidBuffer.GetDimensions(numBoids, stribeBoids);

    uint boidIndex = id.x;                                              // array number of agents to be calculated
    BoidState boidSelf = boidBuffer[boidIndex];                         // agent data to be calculated
    float3 cellAlignment = boidPrefixSumBuffer[0].forward / numBoids;   // average overall orientation
    float3 cellSeparation = boidPrefixSumBuffer[0].position / numBoids; // average overall position

    // agent orientation after alignment
    const float3 alignmentResult = alignmentWeight *
        normalizeSafe(cellAlignment - boidSelf.forward);

    // agent position after separation
    const float3 separationResult = separationWeight *
        normalizeSafe(boidSelf.position - cellSeparation);

    // the direction in which an agent travels towards
    const float3 targetHeading = targetWeight
        * normalizeSafe(targetPosition - boidSelf.position);

    // normalize sum of above 3 vectors
    const float3 normalHeading = normalizeSafe(alignmentResult + separationResult + targetHeading);

    // direction to face regarding time and speed
    const float3 nextHeading = normalizeSafe(boidSelf.forward + deltaTime * (normalHeading - boidSelf.forward));

    // update agent location and orientation with calculation results
    boidSelf.position = boidSelf.position + (nextHeading * moveSpeed * deltaTime);
    boidSelf.forward = nextHeading;
    boidBuffer[boidIndex] = boidSelf;
}

// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#define BLOCK_SIZE 32

struct BoidState
{
    float3 position;
    float3 forward;
};

StructuredBuffer<BoidState> boidBuffer : register(t1);
RWStructuredBuffer<BoidState> boidPrefixSumBuffer : register(u1);
uint numBoids;

groupshared BoidState prefix_sums[BLOCK_SIZE];

[numthreads(BLOCK_SIZE, 1, 1)]
void CSMain(uint3 threadID : SV_GroupThreadID, uint3 dispatchID : SV_DispatchThreadID)
{
    // copy first element to buffer shared by thread group
    prefix_sums[threadID.x] = boidBuffer[dispatchID.x];

    // Add the elements around the first element
    // Each thread checks 1,2,4,8,16 apart
    [unroll]
    for (uint t = 1; t < BLOCK_SIZE; t <<= 1)
    {
        // write the wrong thread
        GroupMemoryBarrierWithGroupSync();

        // add up
        BoidState tmp = prefix_sums[threadID.x];
        if (threadID.x >= t)
        {
            const BoidState other = prefix_sums[threadID.x - t];
            tmp.forward += other.forward;
            tmp.position += other.position;
        }

        // wait for other threads to load
        GroupMemoryBarrierWithGroupSync();

        // write the addition results
        prefix_sums[threadID.x] = tmp;
    }

    // write the sum of each thread
    boidPrefixSumBuffer[dispatchID.x] = prefix_sums[threadID.x];
}
